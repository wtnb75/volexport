# https://taskfile.dev

version: '3'

vars:
  VMS:
    - server
    - client
    - k3s

tasks:
  default:
    cmds:
      - task -l
    silent: true

  build:wheel:
    desc: build wheel
    cmds:
      - python -m build -w

  build:image:
    desc: build container image
    cmds:
      - docker build -t volexp .

  install:deps:
    desc: install dependencies
    cmds:
      - pip install -r requirements.txt

  install:deps:dev:
    desc: install dependencies(dev)
    cmds:
      - task: install:deps
      - pip install -r requirements-dev.txt

  test:
    desc: run unittest
    env:
      PYTHONPATH: "{{.TASK_DIR}}"
    cmds:
      - pytest -xs --ff

  codegen:go:
    desc: generate go client code
    vars:
      TMPFILE:
        sh: mktemp
    cmds:
      - defer: "rm -f {{.TMPFILE}}"
      - "python -m volexport.main apispec --format yaml > {{.TMPFILE}}"
      - "mkdir -p go"
      - "openapi-generator generate -i {{.TMPFILE}} -g go -o go"

  codegen:go2:
    desc: generate go client code
    vars:
      TMPFILE:
        sh: mktemp
    cmds:
      - defer: "rm -f {{.TMPFILE}}"
      - "python -m volexport.main apispec --format yaml > {{.TMPFILE}}"
      - "mkdir -p go"
      - "~/go/bin/oapi-codegen -generate types,client -o go/api_client.go -package client {{.TMPFILE}}"

  apispec:
    desc: generate api spec
    vars:
      OUTPUT: "volexport-api.yaml"
    cmds:
      - "python -m volexport.main apispec --format yaml > {{.OUTPUT}}"

  vm:create:disk:
    desc: create disk for VM test environment
    cmds:
      - "limactl disk create vol1 --size 250G"

  vm:delete:disk:
    desc: delete disk for VM test environment
    cmds:
      - "limactl disk delete vol1"

  vm:create:
    desc: create VMs
    cmds:
      - for:
          var: VMS
        cmd: "limactl create lima/{{.ITEM}}.yaml -y"

  vm:start:
    desc: start VMs
    cmds:
      - for:
          var: VMS
        cmd: "limactl start {{.ITEM}}"

  vm:prepare:server:
    desc: prepare server
    cmds:
      - "limactl shell server /tmp/venv/bin/pip install -r requirements.txt"
      - "limactl shell server sudo pvcreate /dev/vdb"
      - "limactl shell server sudo vgcreate vg0 /dev/vdb"

  vm:prepare:client:
    desc: prepare client
    cmds:
      - "limactl shell client /tmp/venv/bin/pip install -r requirements.txt"

  vm:server:boot:
    desc: boot volexport server
    cmds:
      - "limactl shell server -- /tmp/venv/bin/python -m volexport.main server --vg vg0 --nics eth0 --hostport 0.0.0.0:8080 --verbose"

  vm:stop:
    desc: stop VMs
    cmds:
      - for:
          var: VMS
        cmd: "limactl stop {{.ITEM}} -f"

  vm:delete:
    desc: delete VMs
    cmds:
      - for:
          var: VMS
        cmd: "limactl delete {{.ITEM}} -f"

  vm:xpanes:
    desc: login
    cmds:
      - 'xpanes -S /tmp/tmux-$(id -u)/default -c "limactl shell {}" {{join " " .VMS}}'

  vm:init:
    desc: startup VMs (create disk, create, start, prepare)
    cmds:
      - task: vm:create:disk
      - task: vm:create
      - task: vm:start
      - task: vm:prepare:server
      - task: vm:prepare:client

  vm:fini:
    desc: cleanup VMs (stop, delete, delete disk)
    cmds:
      - task: vm:stop
      - task: vm:delete
      - task: vm:delete:disk

  vm:k:
    desc: run kubectl
    env:
      KUBECONFIG:
       sh: "ls -1 ~/.lima/k3s/copied-from-guest/kubeconfig.yaml"
    cmds:
      - "kubectl {{.CLI_ARGS}}"

  boot:mock:
    desc: boot mock server
    cmds:
      - task: apispec
      - docker run -p 3000:3000 -v {{.TASK_DIR}}/volexport-api.yaml:/w/apispec.yaml:ro stoplight/prism mock -h 0.0.0.0 -p 3000 /w/apispec.yaml

  build:csc:
    desc: build csc binary
    cmds:
      - GOPATH={{.TMPDIR}} go install github.com/rexray/gocsi/csc@latest
      - cp {{.TMPDIR}}/bin/csc csc.native
      - GOPATH={{.TMPDIR}} GOOS=linux go install github.com/rexray/gocsi/csc@latest
      - cp {{.TMPDIR}}/bin/linux_*/csc csc.linux

  build:csi-sanity:
    desc: build csi-sanity binary
    cmds:
      - git clone --depth=1 https://github.com/kubernetes-csi/csi-test/ {{.TMPDIR}}/c
      - make -C {{.TMPDIR}}/c/cmd/csi-sanity VER=local RELEASEVER=local
      - cp {{.TMPDIR}}/c/cmd/csi-sanity/csi-sanity csi-sanity.native
      - make -C {{.TMPDIR}}/c/cmd/csi-sanity VER=local RELEASEVER=local GOOS=linux
      - cp {{.TMPDIR}}/c/cmd/csi-sanity/csi-sanity csi-sanity.linux
